@implements IDisposable
@inject NavigationManager NavigationManager

<!-- start of page header -->
<header id="header" class="nospace">
    <!-- header holder -->
    <div class="header-holder">
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <!-- Page logo -->
                    <div class="logo pull-left"><a href="/" @onclick:preventDefault @onclick=@( () => NavigateTo("/"))>NativoPlus</a></div>

                    <div class="pull-right">
                        <a href="#" class="logo btn-green-nav text-uppercase hidden-mobile">Let's Talk!</a>
                        <a href="#" @onclick:preventDefault @onclick="ToggleMenu" class="pe-7s-menu opener pull-right" style="font-size: 24px/34px;"></a>
                        <!-- start of page navigation -->
                        <Nativo_Menu @bind-ToggleState=@MenuState Position=AllEnumerations.MenuPosition.Right>
                            <div @onclick=@( () => NavigateTo("/"))><Nativo_Menu_Item Text="Home" Url="" /></div>
                            <div @onclick=@( () => NavigateTo("/company/about"))><Nativo_Menu_Item Text="About Us" Url="" /></div>
                            <div @onclick=@( () => NavigateTo("/work/services"))><Nativo_Menu_Item Text="Services" Url="" /></div>
                            <div @onclick=@( () => NavigateTo("/work/portfolio"))><Nativo_Menu_Item Text="Portfolio" Url="" /></div>
                        </Nativo_Menu>



                        <!-- end of page navigation -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</header><!-- end of page header -->
@code {
    private bool MenuState = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void ToggleMenu()
    {
        MenuState = !MenuState;
    }

    public void NavigateTo(string path)
    {
        // Forced Reload To Ensure a Fresh Instance of Javascript Files.
        NavigationManager.NavigateTo(path, forceLoad: true);
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }
    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
    }
}
