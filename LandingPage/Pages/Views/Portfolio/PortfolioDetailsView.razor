@page "/portfolio-details/{projectName}"
@layout EmptyLayout
@using LandingPage.Domain.Entities
@using LandingPage.Infrastructure.Files
@using LandingPage.Components
@inject IJSRuntime jsRuntime

@code {
    private bool MenuState = false;
    [Parameter]
    public string projectName { get; set; } = "";
    public Portfolio project = new Portfolio();
    public List<Team> ourTeamMembers = new List<Team> { };
    private void ToggleMenu()
    {
        MenuState = !MenuState;
    }

    protected override void OnInitialized()
    {
        project = new PortfolioData().portfolio.FirstOrDefault(x => x.Name == projectName) ?? new Portfolio();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/jquery.min.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/owl.carousel.min.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/smoothscroll.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/jquery.validate.min.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/bootstrap.min.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/template/js/scripts.js");
            await jsRuntime.InvokeAsync<IJSObjectReference>("import", "https://vjs.zencdn.net/7.17.0/video.min.js");
            await jsRuntime.InvokeVoidAsync("runInitScript");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}